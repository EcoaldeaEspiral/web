#!/usr/bin/env bash
# SPDX-FileCopyrightText: 2024 Robin Vobruba <hoijui.quaero@gmail.com>
# SPDX-License-Identifier: AGPL-3.0-only
#
# See the output of "$0 -h" for details.

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -Eeu

script_path="$(readlink -f "${BASH_SOURCE[0]}")"
script_dir="$(dirname "$script_path")"
script_name="$(basename "$script_path")"
proj_root="$(cd "$script_dir"/..; pwd)"

function print_help() {

	echo -e "$script_name -"
	echo "Generates the 'SUMMARY.md' file"
	echo "(required by [mdbook](https://github.com/rust-lang/mdBook/))."
	echo
	echo "Usage:"
	echo "  $script_name [OPTION...]"
	echo "Options:"
	echo "  -h, --help"
	echo "      Print this usage help and exits."
	echo "Examples:"
	echo "  $script_name --help"
	echo "  $script_name"
}

# read command-line args
POSITIONAL=()
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		*) # non-/unknown option
			POSITIONAL+=("$arg") # save it in an array for later
			;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

cd "$proj_root"

# REUSE-IgnoreStart
find . -type d -path ./build -prune -o -name "*.md" -print | sed -e 's|^\./||' | grep -v "SUMMARY.md" | grep -v "README.md" | grep -v "index.md" | sort | awk -F'/' -e '
function extract_front_matter_value(file_path, key, _found) {

	cmd_get_value = sprintf("grep \"^%s:\" < \"%s\" | head -1 | sed -e \"s/^%s:[ \t]*//\" -e \"s/[ \t]*$//\"", key, file_path, key)
	#value = sprintf("<%s_VALUE_NOT_FOUND>", toupper(key))
	value = ""
	_found = 0
	while ((cmd_get_value | getline result) > 0) {
		value = result
		_found = 1
		break
	}
	
	return value
}

BEGIN {
	last_section = ""

	print("# Summary")
	print("\n<!--\nSPDX-FileCopyrightText: Robin Vobruba <hoijui.quaero@gmail.com>\n\nSPDX-License-Identifier: CC-BY-SA-4.0\n-->")
	print("\n<!--\nNOTE:\nThis file was auto-generated with script\n\"'"$0"'\";\ndo not edit manually!\n-->")
	print("")
	print("[Principal](index.md)")
	print("")
}

{
	skip_this_line = 0
	file_path = $0
	if ($2) {
		section = $1
		section_name = toupper(substr(section, 1, 1)) substr(section, 2);
		file_name = $2
	} else {
		section = ""
		section_name = ""
		file_name = $1
	}
	new_section = section != last_section

	page_title = extract_front_matter_value(file_path, "title")
	menu = tolower(extract_front_matter_value(file_path, "menu"))
	skip_this_line = menu == "false"
	# NOTE We have to remove them (from toc.html) after HTML generation,
	#      because otherwise no HTML is genreated for them by mdbook.
	skip_this_line = false

	if (0) {
		if (new_section) {
			if (section) {
				printf("\n# %s\n\n", section_name)
			} else {
				printf("\n")
			}
		}

		if (section) {
			sep = "- "
		} else {
			sep = "\n"
		}
	} else if (0) {
		if (section) {
			skip_this_line = 1
		}
		sep = "\n"
	} else {
		sep = "- "
		if (section) {
			if (new_section) {
				section_index = section "/index.md"
				page_title_section = extract_front_matter_value(section_index, "title")
				printf("%s[%s](%s)\n", sep, page_title_section, section_index)
			}
			sep = "  - "
		}
	}

	if (!skip_this_line) {
		printf("%s[%s](%s)\n", sep, page_title, file_path)
	}

	last_section = section
}
' > "SUMMARY.md"
# REUSE-IgnoreEnd
